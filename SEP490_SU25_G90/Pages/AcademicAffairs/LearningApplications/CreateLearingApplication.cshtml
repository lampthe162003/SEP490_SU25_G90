@page "/AcademicAffairs/LearningApplications/Create"
@model SEP490_SU25_G90.Pages.AcademicAffairs.LearningApplications.CreateLearingApplicationModel

@{
    ViewData["Title"] = "Tạo mới hồ sơ học";
    Layout = "~/Pages/Shared/_AcademicAffairsLayout.cshtml";
}

<h2 class="mb-4">Tạo mới hồ sơ học</h2>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">@TempData["SuccessMessage"]</div>
}

@if (!string.IsNullOrEmpty(Model.ErrorMessage))
{
    <div class="alert alert-danger">@Model.ErrorMessage</div>
}

<!-- Form tìm kiếm CCCD -->
<form method="post" asp-page-handler="Search" class="mb-4 w-50">
    <div class="input-group">
        <input type="text" name="SearchCccd" id="searchCccd" class="form-control" placeholder="Nhập số CCCD..." value="@Model.SearchCccd" maxlength="12" />
        <button type="submit" class="btn btn-primary" id="searchButton" disabled>Tìm kiếm</button>
    </div>
    <div class="form-text mt-1">
        <small class="text-muted">
            <i class="fas fa-info-circle me-1"></i>
            CCCD phải có đúng 12 chữ số
        </small>
    </div>
</form>

<!-- Form tạo hồ sơ -->
<form method="post" enctype="multipart/form-data">
    <input type="hidden" asp-for="SearchCccd" />
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

    <div class="row">
        <div class="col-md-6">
            <!-- Họ tên -->
            <div class="mb-2">
                <label class="form-label">Họ tên học viên:</label>
                <input class="form-control" value="@Model.LearnerInfo?.LearnerFullName" readonly />
            </div>

            <!-- CCCD -->
            <div class="mb-2">
                <label class="form-label">CCCD:</label>
                <input class="form-control" value="@Model.LearnerInfo?.LearnerCccdNumber" readonly />
            </div>

            <!-- Ngày sinh -->
            <div class="mb-2">
                <label class="form-label">Ngày sinh:</label>
                <input class="form-control" value="@Model.LearnerInfo?.LearnerDob?.ToString("dd/MM/yyyy")" readonly />
                <input type="hidden" asp-for="LearnerInfo.LearnerDob" />
            </div>

            <!-- Số điện thoại -->
            <div class="mb-2">
                <label class="form-label">Số điện thoại:</label>
                <input class="form-control" value="@Model.LearnerInfo?.LearnerPhone" readonly />
            </div>

            <!-- Email -->
            <div class="mb-2">
                <label class="form-label">Email:</label>
                <input class="form-control" value="@Model.LearnerInfo?.LearnerEmail" readonly />
            </div>

            <!-- Hidden fields -->
            <input type="hidden" asp-for="LearnerInfo.LearnerId" />
            <input type="hidden" asp-for="LearnerInfo.LearnerCccdImageUrl" />
            <input type="hidden" asp-for="LearnerInfo.LearnerHealthCertImageUrl" />

            <!-- Loại bằng -->
            <div class="mb-2">
                <label asp-for="LearnerInfo.LicenceTypeId" class="form-label">Loại bằng</label>
                <select asp-for="LearnerInfo.LicenceTypeId" class="form-select" asp-items="ViewBag.LicenceTypeId">
                    <option value="">-- Chọn loại bằng --</option>
                </select>
                <span asp-validation-for="LearnerInfo.LicenceTypeId" class="text-danger"></span>
                <div class="form-text mt-1">
                    <small class="text-muted">
                        <i class="fas fa-info-circle me-1"></i>
                        <strong>Yêu cầu tuổi:</strong> B1, B2: 18+ tuổi | C: 21+ tuổi
                    </small>
                </div>
            </div>

            <!-- Ngày đăng ký -->
            <div class="mb-2">
                <label asp-for="LearnerInfo.SubmittedAt" class="form-label">Ngày đăng ký</label>
                <input asp-for="LearnerInfo.SubmittedAt" class="form-control" type="date" />
                <span asp-validation-for="LearnerInfo.SubmittedAt" class="text-danger"></span>
            </div>
        </div>

        <!-- Cột hiển thị ảnh -->
        <div class="col-md-6">
            <div class="mb-3">
                <label class="form-label">Ảnh CCCD:</label><br />
                @if (!string.IsNullOrEmpty(Model.LearnerInfo?.LearnerCccdImageUrl))
                {
                    <img src="@Model.LearnerInfo.LearnerCccdImageUrl" class="img-fluid" />
                }
                else
                {
                    <div class="text-muted">Chưa có ảnh</div>
                }
            </div>

            <div class="mb-3">
                <label class="form-label">Ảnh giấy khám sức khỏe:</label><br />
                @if (!string.IsNullOrEmpty(Model.LearnerInfo?.LearnerHealthCertImageUrl))
                {
                    <img src="@Model.LearnerInfo.LearnerHealthCertImageUrl" class="img-fluid" />
                }
                else
                {
                    <div class="text-muted">Chưa có ảnh</div>
                }
            </div>
        </div>
    </div>

    <!-- Nút hành động -->
    <div class="mt-3 d-flex justify-content-start">
        <a asp-page="ListLearningApplication" class="btn btn-outline-secondary btn-lg me-2">Hủy</a>
        <button type="submit" class="btn btn-success btn-lg"
                asp-page-handler="Create"
                disabled="@(Model.IsEligibleToCreate ? null : "disabled")">
            Tạo mới
        </button>
    </div>
</form>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // CCCD Search validation
            const searchCccdInput = document.getElementById('searchCccd');
            const searchButton = document.getElementById('searchButton');
            
            if (searchCccdInput && searchButton) {
                // Only allow numbers
                searchCccdInput.addEventListener('input', function(e) {
                    // Remove any non-digit characters
                    e.target.value = e.target.value.replace(/[^\d]/g, '');
                    
                    // Limit to 12 digits
                    if (e.target.value.length > 12) {
                        e.target.value = e.target.value.substring(0, 12);
                    }
                    
                    // Enable/disable search button based on length
                    searchButton.disabled = e.target.value.length !== 12;
                });

                // Prevent non-numeric input
                searchCccdInput.addEventListener('keypress', function(e) {
                    // Only allow numbers
                    if (!/^\d$/.test(e.key) && !['Backspace', 'Delete', 'Tab', 'Escape', 'Enter', 'ArrowLeft', 'ArrowRight'].includes(e.key)) {
                        e.preventDefault();
                    }
                });

                // Initial validation
                searchButton.disabled = searchCccdInput.value.length !== 12;
            }

            const licenceTypeSelect = document.querySelector('select[name="LearnerInfo.LicenceTypeId"]');
            const submittedAtInput = document.querySelector('input[name="LearnerInfo.SubmittedAt"]');
            const learnerDobInput = document.querySelector('input[name="LearnerInfo.LearnerDob"]');
            
            // Get learner's birth date from the readonly input
            const learnerDobDisplay = document.querySelector('input[value*="/"]'); // The readonly DOB display
            let learnerBirthDate = null;
            
            if (learnerDobDisplay && learnerDobDisplay.value) {
                // Parse the date from dd/MM/yyyy format
                const parts = learnerDobDisplay.value.split('/');
                if (parts.length === 3) {
                    learnerBirthDate = new Date(parts[2], parts[1] - 1, parts[0]);
                }
            }

            function calculateAge(birthDate, registrationDate) {
                let age = registrationDate.getFullYear() - birthDate.getFullYear();
                const monthDiff = registrationDate.getMonth() - birthDate.getMonth();
                
                if (monthDiff < 0 || (monthDiff === 0 && registrationDate.getDate() < birthDate.getDate())) {
                    age--;
                }
                return age;
            }

            function validateAgeRequirement() {
                if (!learnerBirthDate || !licenceTypeSelect.value || !submittedAtInput.value) {
                    return;
                }

                const registrationDate = new Date(submittedAtInput.value);
                const licenceCode = licenceTypeSelect.options[licenceTypeSelect.selectedIndex].text;
                
                if (!licenceCode || licenceCode === '-- Chọn loại bằng --') {
                    return;
                }

                const age = calculateAge(learnerBirthDate, registrationDate);
                let requiredAge = 0;
                let isValid = true;

                switch (licenceCode) {
                    case 'B1':
                    case 'B2':
                        requiredAge = 18;
                        isValid = age >= 18;
                        break;
                    case 'C':
                        requiredAge = 21;
                        isValid = age >= 21;
                        break;
                    default:
                        return; // Other license types don't have age restrictions
                }

                // Remove existing validation message
                const existingError = licenceTypeSelect.parentNode.querySelector('.age-validation-error');
                if (existingError) {
                    existingError.remove();
                }

                if (!isValid) {
                    const errorDiv = document.createElement('div');
                    errorDiv.className = 'age-validation-error text-danger mt-1';
                    errorDiv.style.fontSize = '0.875rem';
                    errorDiv.innerHTML = `<i class="fas fa-exclamation-triangle me-1"></i>
                        Học viên phải đủ ${requiredAge} tuổi để đăng ký bằng ${licenceCode}. 
                        Hiện tại học viên ${age} tuổi (tính đến ngày đăng ký).`;
                    
                    licenceTypeSelect.parentNode.appendChild(errorDiv);
                    
                    // Disable the create button
                    const createButton = document.querySelector('button[asp-page-handler="Create"]');
                    if (createButton) {
                        createButton.disabled = true;
                        createButton.title = 'Học viên không đủ tuổi để đăng ký loại bằng này';
                    }
                } else {
                    // Re-enable the create button if it was disabled by age validation
                    const createButton = document.querySelector('button[asp-page-handler="Create"]');
                    if (createButton && createButton.title === 'Học viên không đủ tuổi để đăng ký loại bằng này') {
                        createButton.disabled = false;
                        createButton.title = '';
                    }
                }
            }

            // Add event listeners
            if (licenceTypeSelect) {
                licenceTypeSelect.addEventListener('change', validateAgeRequirement);
            }
            
            if (submittedAtInput) {
                submittedAtInput.addEventListener('change', validateAgeRequirement);
            }

            // Initial validation if form is already populated
            if (licenceTypeSelect && licenceTypeSelect.value && submittedAtInput && submittedAtInput.value) {
                validateAgeRequirement();
            }
        });
    </script>
}

@section Styles {
    <style>
        h2 {
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 1.5rem;
        }

        .form-label {
            font-weight: 500;
            color: #34495e;
        }

        .form-control[readonly],
        .form-select {
            background-color: #f8f9fa;
            border-color: #ced4da;
        }

            .form-control:focus,
            .form-select:focus {
                border-color: #80bdff;
                box-shadow: 0 0 0 0.1rem rgba(0,123,255,.25);
            }

            .form-select option {
                color: #2c3e50;
            }

        .btn-lg {
            padding: 0.6rem 1.2rem;
            font-size: 1.05rem;
        }

        .img-fluid {
            max-height: 300px;
            max-width: 100%;
            border: 1px solid #ccc;
            border-radius: 8px;
            margin-top: 8px;
        }

        .text-muted {
            font-style: italic;
            color: #6c757d;
        }

        .alert {
            font-size: 0.95rem;
            padding: 10px 15px;
        }

        .input-group input {
            height: 44px;
        }

        .input-group .btn {
            padding: 0 20px;
        }

        .btn:disabled {
            opacity: 0.65;
            cursor: not-allowed;
        }

        .age-validation-error {
            background-color: #f8d7da;
            border: 1px solid #f5c6cb;
            border-radius: 4px;
            padding: 8px 12px;
            margin-top: 8px;
        }

        .form-text {
            font-size: 0.875rem;
        }

        #searchButton:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        #searchCccd:invalid {
            border-color: #dc3545;
        }

        #searchCccd:valid {
            border-color: #28a745;
        }
    </style>
}



